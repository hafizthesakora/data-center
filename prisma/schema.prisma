// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  hashedPassword String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          Role      @default(TECHNICIAN)
  cycles        Cycle[]
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


enum Role {
  TECHNICIAN
  APPROVER
}

model Cycle {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  technician  User     @relation(fields: [technicianId], references: [id])
  technicianId String   @db.ObjectId
  createdAt   DateTime @default(now())
  submittedAt DateTime?
  approvedAt  DateTime?
  status      Status   @default(DRAFT)
  entries     Entry[]
}

model Entry {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  entryNumber Int
  cycle       Cycle    @relation(fields: [cycleId], references: [id])
  cycleId     String   @db.ObjectId
  createdAt   DateTime @default(now())
  data        Json?
  isCompleted Boolean  @default(false)
}

enum Status {
  DRAFT
  SUBMITTED
  APPROVED
}